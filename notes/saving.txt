Moving to another area (AKA saving current area)

- take `Player` entity out, serialize them
- ? throw persuing enemies into Limbo (?) state
    - limbo actors enter new area when necessary (?)
    - or always keep neighbor areas loaded in memory (?)
- ? serialize all remaining entity data
    - ? perhaps add a 'DoNotSave' component for entities we don't care about?
- serialize map positional data
- serialize last-visited tick (?) - useful to repopulate if revisiting
- pull save game from storage
- update/add all given area data to save file under key (idx based)
- load(or generate) next area
- populate player entity into area
- start game on adventure screen

- teardown
    - PLAYER:
        - delete player entity id
    - MAP:
        - clear all positions
    - WORLD:
        - delete all area data
    - ENGINE:
        - delete all entities

savefile = {
    filename: '',
    clock: {},
    player: {
        entityId,
        data,
        position (?)
    },
    world: {
        areaId,
        exploredAreas
    }
}
savefile-x-entities: []
savefile-x-positions: []


- setup(savefile)
    - CLOCK:
        - set times
    - PLAYER:
        - deserialize player
    - WORLD:
        - enter "load area" screen
    - MAP:
        -
    - ENGINE:


- save
    - CLOCK:
        - store time
    - PLAYER:
        - serialize player data
            - entityId
            - nested data
            - position
    - MAP:
        - save position data
    - WORLD
        - save area ID
        - save 'explored' areas
        - extract all 'AreaConstrained' related data
            - geotic (ability to serialize only given array of entities)
            - save into filename

- NEW GAME
    - get filename
        - cleanup if exists
    - teardown
    - create 'player' object and set area = 0
    - setup(
        player,
        filename
    )

- NEW AREA
    - data = save()
    - set next areaId
    - set entry point
    - setup(data)


- SAVE GAME
    - PLAYER:
        - serialize player data
            - entityId
            - nested data
            - position
            - area ID
        - destroy player entity (?)
    - MAP:
        - save position data
    - WORLD:
        - save area data

- LOAD
    - get filename
        - check if exists
    - teardown
    - setup

